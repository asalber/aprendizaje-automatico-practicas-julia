{
  "hash": "2079b5111ae6f4817a60b13ff845dec8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Preprocesamiento de datos\nlang: es\n---\n\nEsta práctica contiene ejercicios que muestran como preprocesar un conjunto de datos con Julia. El preprocesamiento de datos es una tarea fundamental en la construcción de modelos de aprendizaje automático que consiste en la limpieza, transformación y preparación de los datos para que puedan alimentar el proceso de entrenamiento de los modelos, así como para la evaluación de su rendimiento. El preprocesamiento de datos incluye tareas como\n\n-   Limpieza de datos.\n-   Imputación de valores perdidos.\n-   Recodificación de variables.\n-   Creación de nuevas variables.\n-   Transformación de variables.\n-   Selección de variables.\n-   Fusión de datos.\n-   Reestructuración del conjunto de datos.\n-   División del conjunto de datos en subconjuntos de entrenamiento y prueba.\n\n## Ejercicios Resueltos\n\nPara la realización de esta práctica se requieren los siguientes paquetes:\n\n``` julia\nusing CSV  # Para la lectura de archivos CSV.\nusing DataFrames  # Para el manejo de datos tabulares.\nusing PrettyTables  # Para mostrar tablas formateadas.\nusing Plots  # Para el dibujo de gráficas.\nusing Makie  # Para obtener gráficos interactivos.\nusing StatsBase  # Para la estandarización de variables.\nusing Statistics  # Para el cálculo de estadísticas.\n```\n\n::: {#exr-preprocesamiento-1}\nLa siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\na.  Crear un data frame con los datos de la tabla.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`DataFrame`](https://dataframes.juliadata.org/stable/lib/types/#DataFrames.DataFrame) del paquete [`DataFrames`](https://dataframes.juliadata.org/) para partir el rango de valores en intervalos y asociar a cada intervalo una categoría.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=1}\n    ``` {.julia .cell-code}\n    using DataFrames\n    df = DataFrame(\n        Mes = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\"],\n        Ingresos = [45000, 41500, 51200, 49700],\n        Gastos = [33400, 35400, 35600, 36300],\n        Impuestos = [6450, 6300, 7100, 6850]\n        )\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=2}\n    ```{=tex}\n    \\begin{tabular}{r|cccc}\n    \t& Mes & Ingresos & Gastos & Impuestos\\\\\n    \t\\hline\n    \t& String & Int64 & Int64 & Int64\\\\\n    \t\\hline\n    \t1 & Enero & 45000 & 33400 & 6450 \\\\\n    \t2 & Febrero & 41500 & 35400 & 6300 \\\\\n    \t3 & Marzo & 51200 & 35600 & 7100 \\\\\n    \t4 & Abril & 49700 & 36300 & 6850 \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nb.  Crear una nueva columna con los beneficios de cada mes (ingresos - gastos - impuestos).\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=2}\n    ``` {.julia .cell-code}\n    df.Beneficios = df.Ingresos - df.Gastos - df.Impuestos\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=3}\n    ```{=tex}\n    \\begin{tabular}{r|ccccc}\n    \t& Mes & Ingresos & Gastos & Impuestos & Beneficios\\\\\n    \t\\hline\n    \t& String & Int64 & Int64 & Int64 & Int64\\\\\n    \t\\hline\n    \t1 & Enero & 45000 & 33400 & 6450 & 5150 \\\\\n    \t2 & Febrero & 41500 & 35400 & 6300 & -200 \\\\\n    \t3 & Marzo & 51200 & 35600 & 7100 & 8500 \\\\\n    \t4 & Abril & 49700 & 36300 & 6850 & 6550 \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nc.  Crear una nueva columna con la variable `Balance` con dos posibles categorías: `positivo` si ha habido beneficios y `negativo` si ha habido pérdidas.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=3}\n    ``` {.julia .cell-code}\n    df.Balance = ifelse.(df.Beneficios .> 0, \"positivo\", \"negativo\")\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=4}\n    ```{=tex}\n    \\begin{tabular}{r|cccccc}\n    \t& Mes & Ingresos & Gastos & Impuestos & Beneficios & Balance\\\\\n    \t\\hline\n    \t& String & Int64 & Int64 & Int64 & Int64 & String\\\\\n    \t\\hline\n    \t1 & Enero & 45000 & 33400 & 6450 & 5150 & positivo \\\\\n    \t2 & Febrero & 41500 & 35400 & 6300 & -200 & negativo \\\\\n    \t3 & Marzo & 51200 & 35600 & 7100 & 8500 & positivo \\\\\n    \t4 & Abril & 49700 & 36300 & 6850 & 6550 & positivo \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nd.  Filtrar el conjunto de datos para quedarse con los nombres de los meses y los beneficios de los meses con balance positivo.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=4}\n    ``` {.julia .cell-code}\n    df[df.Balance .== \"positivo\", [:Mes, :Beneficios]]\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=5}\n    ```{=tex}\n    \\begin{tabular}{r|cc}\n    \t& Mes & Beneficios\\\\\n    \t\\hline\n    \t& String & Int64\\\\\n    \t\\hline\n    \t1 & Enero & 5150 \\\\\n    \t2 & Marzo & 8500 \\\\\n    \t3 & Abril & 6550 \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n:::\n\n::: {#exr-preprocesamiento-2}\nEl fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\na.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv).\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`CSV.read`](https://csv.juliadata.org/stable/reading.html#CSV.read) del paquete [`CSV`](https://csv.juliadata.org/) para crear und data frame a partir de un fichero CSV. Si el fichero está en una url, utilizar la función [`download(url)`](https://docs.julialang.org/en/v1/base/download/#Base.download) para descargar el fichero y después leerlo con la función \\[`CSV.read`\\].\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=5}\n    ``` {.julia .cell-code}\n    using CSV\n    df = CSV.read(download(\"https://aprendeconalf.es/aprendizaje-automatico-practicas-julia/datos/colesterol.csv\"), DataFrame)\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=6}\n    ```{=tex}\n    \\begin{tabular}{r|cccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol\\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64?\\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 \\\\\n    \t3 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 \\\\\n    \t4 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 \\\\\n    \t5 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 \\\\\n    \t6 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 \\\\\n    \t7 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 \\\\\n    \t8 & Pilar Martín González & 22 & M & 60.0 & 1.66 & \\emph{missing} \\\\\n    \t9 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 \\\\\n    \t10 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 \\\\\n    \t11 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 \\\\\n    \t12 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 \\\\\n    \t13 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 \\\\\n    \t14 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nb.  Crear una nueva columna con el índice de masa corporal, usando la siguiente fórmula\n\n    $$\n    \\mbox{IMC} = \\frac{\\mbox{Peso (kg)}}{\\mbox{Altura (cm)}^2}\n    $$\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=6}\n    ``` {.julia .cell-code}\n    df.imc = df.peso ./ (df.altura .^ 2)\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=7}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64? & \\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t3 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t4 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t5 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t6 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t7 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t8 & Pilar Martín González & 22 & M & 60.0 & 1.66 & \\emph{missing} & $\\dots$ \\\\\n    \t9 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t10 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t11 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t12 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t13 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t14 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nc.  Crear una nueva columna con la variable `obesidad` recodificando la columna `imc` en las siguientes categorías.\n\n    | Rango IMC      | Categoría |\n    |:---------------|:----------|\n    | Menor de 18.5  | Bajo peso |\n    | De 18.5 a 24.5 | Saludable |\n    | De 24.5 a 30   | Sobrepeso |\n    | Mayor de 30    | Obeso     |\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`cut`](https://categoricalarrays.juliadata.org/stable/apiindex/#CategoricalArrays.cut-Tuple%7BAbstractArray,%20AbstractVector%7D) del paquete [`CategoricalArrays`](https://categoricalarrays.juliadata.org/) para partir el rango de valores en intervalos y asociar a cada intervalo una categoría.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=7}\n    ``` {.julia .cell-code}\n    using CategoricalArrays\n    df.obesidad = cut(df.imc, [0, 18.5, 24.5, 30, Inf],\n                    labels=[\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\"],\n                    extend=true)\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=8}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64? & \\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t3 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t4 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t5 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t6 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t7 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t8 & Pilar Martín González & 22 & M & 60.0 & 1.66 & \\emph{missing} & $\\dots$ \\\\\n    \t9 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t10 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t11 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t12 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t13 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t14 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nd.  Seleccionar las columnas `nombre`, `sexo` y `edad`.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=8}\n    ``` {.julia .cell-code}\n    df[:, [:nombre, :sexo, :edad]]\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=9}\n    ```{=tex}\n    \\begin{tabular}{r|ccc}\n    \t& nombre & sexo & edad\\\\\n    \t\\hline\n    \t& String & String1 & Int64\\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & H & 18 \\\\\n    \t2 & Rosa Díaz Díaz & M & 32 \\\\\n    \t3 & Javier García Sánchez & H & 24 \\\\\n    \t4 & Carmen López Pinzón & M & 35 \\\\\n    \t5 & Marisa López Collado & M & 46 \\\\\n    \t6 & Antonio Ruiz Cruz & H & 68 \\\\\n    \t7 & Antonio Fernández Ocaña & H & 51 \\\\\n    \t8 & Pilar Martín González & M & 22 \\\\\n    \t9 & Pedro Gálvez Tenorio & H & 35 \\\\\n    \t10 & Santiago Reillo Manzano & H & 46 \\\\\n    \t11 & Macarena Álvarez Luna & M & 53 \\\\\n    \t12 & José María de la Guía Sanz & H & 58 \\\\\n    \t13 & Miguel Angel Cuadrado Gutiérrez & H & 27 \\\\\n    \t14 & Carolina Rubio Moreno & M & 20 \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\ne.  Anonimizar los datos eliminando la columna `nombre`.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`select`](https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.select) del paquete [`DataFrames`](https://dataframes.juliadata.org/) para seleccionar las columnas deseadas y eliminar las columnas no deseadas. Existe también la función [`select!`](https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.select!) que modifica el data frame original eliminando las columnas no seleccionadas.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=9}\n    ``` {.julia .cell-code}\n    select(df, Not(:nombre))\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=10}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& edad & sexo & peso & altura & colesterol & imc & obesidad\\\\\n    \t\\hline\n    \t& Int64 & String1 & Float64? & Float64 & Float64? & Float64? & Cat…?\\\\\n    \t\\hline\n    \t1 & 18 & H & 85.0 & 1.79 & 182.0 & 26.5285 & Sobrepeso \\\\\n    \t2 & 32 & M & 65.0 & 1.73 & 232.0 & 21.7181 & Saludable \\\\\n    \t3 & 24 & H & \\emph{missing} & 1.81 & 191.0 & \\emph{missing} & \\emph{missing} \\\\\n    \t4 & 35 & M & 65.0 & 1.7 & 200.0 & 22.4913 & Saludable \\\\\n    \t5 & 46 & M & 51.0 & 1.58 & 148.0 & 20.4294 & Saludable \\\\\n    \t6 & 68 & H & 66.0 & 1.74 & 249.0 & 21.7994 & Saludable \\\\\n    \t7 & 51 & H & 62.0 & 1.72 & 276.0 & 20.9573 & Saludable \\\\\n    \t8 & 22 & M & 60.0 & 1.66 & \\emph{missing} & 21.7738 & Saludable \\\\\n    \t9 & 35 & H & 90.0 & 1.94 & 241.0 & 23.9133 & Saludable \\\\\n    \t10 & 46 & H & 75.0 & 1.85 & 280.0 & 21.9138 & Saludable \\\\\n    \t11 & 53 & M & 55.0 & 1.62 & 262.0 & 20.9572 & Saludable \\\\\n    \t12 & 58 & H & 78.0 & 1.87 & 198.0 & 22.3055 & Saludable \\\\\n    \t13 & 27 & H & 109.0 & 1.98 & 210.0 & 27.8033 & Sobrepeso \\\\\n    \t14 & 20 & M & 61.0 & 1.77 & 194.0 & 19.4708 & Saludable \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nf.  Reordenar las columnas poniendo la columna `sexo` antes que la columna `edad`.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=10}\n    ``` {.julia .cell-code}\n    select(df, Cols(:sexo, :edad, Not(:sexo, :edad)))\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=11}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& sexo & edad & nombre & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String1 & Int64 & String & Float64? & Float64 & Float64? & \\\\\n    \t\\hline\n    \t1 & H & 18 & José Luis Martínez Izquierdo & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t2 & M & 32 & Rosa Díaz Díaz & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t3 & H & 24 & Javier García Sánchez & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t4 & M & 35 & Carmen López Pinzón & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t5 & M & 46 & Marisa López Collado & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t6 & H & 68 & Antonio Ruiz Cruz & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t7 & H & 51 & Antonio Fernández Ocaña & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t8 & M & 22 & Pilar Martín González & 60.0 & 1.66 & \\emph{missing} & $\\dots$ \\\\\n    \t9 & H & 35 & Pedro Gálvez Tenorio & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t10 & H & 46 & Santiago Reillo Manzano & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t11 & M & 53 & Macarena Álvarez Luna & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t12 & H & 58 & José María de la Guía Sanz & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t13 & H & 27 & Miguel Angel Cuadrado Gutiérrez & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t14 & M & 20 & Carolina Rubio Moreno & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\ng.  Filtrar el data frame para quedarse con las mujeres.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=11}\n    ``` {.julia .cell-code}\n    df[df.sexo .== \"M\", :]\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=12}\n    ```{=tex}\n    \\begin{tabular}{r|cccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & imc & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64? & Float64? & \\\\\n    \t\\hline\n    \t1 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & 21.7181 & $\\dots$ \\\\\n    \t2 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & 22.4913 & $\\dots$ \\\\\n    \t3 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & 20.4294 & $\\dots$ \\\\\n    \t4 & Pilar Martín González & 22 & M & 60.0 & 1.66 & \\emph{missing} & 21.7738 & $\\dots$ \\\\\n    \t5 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & 20.9572 & $\\dots$ \\\\\n    \t6 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & 19.4708 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nh.  Filtrar el data frame para quedarse con los hombres mayores de 30 años.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=12}\n    ``` {.julia .cell-code}\n    df[(df.sexo .== \"H\") .& (df.edad .> 30), :]\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=13}\n    ```{=tex}\n    \\begin{tabular}{r|cccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & imc & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64? & Float64? & \\\\\n    \t\\hline\n    \t1 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & 21.7994 & $\\dots$ \\\\\n    \t2 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & 20.9573 & $\\dots$ \\\\\n    \t3 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & 23.9133 & $\\dots$ \\\\\n    \t4 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & 21.9138 & $\\dots$ \\\\\n    \t5 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & 22.3055 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\ni.  Filtrar el data frame para quedarse con las filas sin valores perdidos.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`dropmissing`](https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.dropmissing) del paquete [`DataFrames`](https://dataframes.juliadata.org/) para eliminar las filas con valores perdidos.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=13}\n    ``` {.julia .cell-code}\n    dropmissing(df)\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=14}\n    ```{=tex}\n    \\begin{tabular}{r|cccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & imc & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64 & Float64 & Float64 & Float64 & \\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & 26.5285 & $\\dots$ \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & 21.7181 & $\\dots$ \\\\\n    \t3 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & 22.4913 & $\\dots$ \\\\\n    \t4 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & 20.4294 & $\\dots$ \\\\\n    \t5 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & 21.7994 & $\\dots$ \\\\\n    \t6 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & 20.9573 & $\\dots$ \\\\\n    \t7 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & 23.9133 & $\\dots$ \\\\\n    \t8 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & 21.9138 & $\\dots$ \\\\\n    \t9 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & 20.9572 & $\\dots$ \\\\\n    \t10 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & 22.3055 & $\\dots$ \\\\\n    \t11 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & 27.8033 & $\\dots$ \\\\\n    \t12 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & 19.4708 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nj.  Filtrar el data frame para eliminar las filas con datos perdidos en la columna `colesterol`.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`dropmissing`, col](https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.dropmissing) donde `col` es el nombre de la columna que contiene los valores perdidos.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=14}\n    ``` {.julia .cell-code}\n    dropmissing(df, :colesterol)    \n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=15}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64 & \\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t3 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t4 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t5 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t6 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t7 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t8 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t9 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t10 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t11 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t12 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t13 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nk.  Imputar los valores perdidos en la columna `colesterol` con la media de los valores no perdidos.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`coalesce`](https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.dropmissing) para reemplazar los valores perdidos por otros valores.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=15}\n    ``` {.julia .cell-code}\n    using Statistics\n    media_colesterol = mean(skipmissing(df.colesterol))\n    df.colesterol = coalesce.(df.colesterol, media_colesterol)\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=16}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64 & \\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t3 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t4 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t5 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t6 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t7 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t8 & Pilar Martín González & 22 & M & 60.0 & 1.66 & 220.231 & $\\dots$ \\\\\n    \t9 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t10 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t11 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t12 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t13 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t14 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\na.  Crear una nueva columna con las puntuaciones típicas del colesterol, es decir, estandarizando la columna `colesterol`.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`Standardizer`](https://juliastats.org/StatsBase.jl/stable/transformations/#StatsBase.standardize) del paquete [`StatsBase`](https://juliastats.org/StatsBase.jl/) para estandarizar una variable.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=16}\n    ``` {.julia .cell-code}\n    using StatsBase\n    df.colesterol_estandarizado = standardize(ZScoreTransform, df.colesterol)\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=17}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64 & \\\\\n    \t\\hline\n    \t1 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t2 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t3 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t4 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t5 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t6 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t7 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t8 & Pilar Martín González & 22 & M & 60.0 & 1.66 & 220.231 & $\\dots$ \\\\\n    \t9 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t10 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t11 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t12 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t13 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t14 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nl.  Ordenar el data frame según la columna `nombre`.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`sort`](https://docs.julialang.org/en/v1/base/sort/#Base.sort) para ordenar las filas del data frame según los valores de una o varias columnas. Utilizar el parámetro `rev` para especificar mediante un vector de booleanos si el orden es ascendente o descendente.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=17}\n    ``` {.julia .cell-code}\n    sort(df, :nombre)\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=18}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64 & \\\\\n    \t\\hline\n    \t1 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t2 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t3 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t4 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \t5 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t6 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t7 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t8 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t9 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t10 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t11 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t12 & Pilar Martín González & 22 & M & 60.0 & 1.66 & 220.231 & $\\dots$ \\\\\n    \t13 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t14 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nm.  Ordenar el data frame ascendentemente por la columna `sexo` y descendentemente por la columna `edad`.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=18}\n    ``` {.julia .cell-code}\n    sort(df, [:sexo, :edad], rev=[false, true])\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=19}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccc}\n    \t& nombre & edad & sexo & peso & altura & colesterol & \\\\\n    \t\\hline\n    \t& String & Int64 & String1 & Float64? & Float64 & Float64 & \\\\\n    \t\\hline\n    \t1 & Antonio Ruiz Cruz & 68 & H & 66.0 & 1.74 & 249.0 & $\\dots$ \\\\\n    \t2 & José María de la Guía Sanz & 58 & H & 78.0 & 1.87 & 198.0 & $\\dots$ \\\\\n    \t3 & Antonio Fernández Ocaña & 51 & H & 62.0 & 1.72 & 276.0 & $\\dots$ \\\\\n    \t4 & Santiago Reillo Manzano & 46 & H & 75.0 & 1.85 & 280.0 & $\\dots$ \\\\\n    \t5 & Pedro Gálvez Tenorio & 35 & H & 90.0 & 1.94 & 241.0 & $\\dots$ \\\\\n    \t6 & Miguel Angel Cuadrado Gutiérrez & 27 & H & 109.0 & 1.98 & 210.0 & $\\dots$ \\\\\n    \t7 & Javier García Sánchez & 24 & H & \\emph{missing} & 1.81 & 191.0 & $\\dots$ \\\\\n    \t8 & José Luis Martínez Izquierdo & 18 & H & 85.0 & 1.79 & 182.0 & $\\dots$ \\\\\n    \t9 & Macarena Álvarez Luna & 53 & M & 55.0 & 1.62 & 262.0 & $\\dots$ \\\\\n    \t10 & Marisa López Collado & 46 & M & 51.0 & 1.58 & 148.0 & $\\dots$ \\\\\n    \t11 & Carmen López Pinzón & 35 & M & 65.0 & 1.7 & 200.0 & $\\dots$ \\\\\n    \t12 & Rosa Díaz Díaz & 32 & M & 65.0 & 1.73 & 232.0 & $\\dots$ \\\\\n    \t13 & Pilar Martín González & 22 & M & 60.0 & 1.66 & 220.231 & $\\dots$ \\\\\n    \t14 & Carolina Rubio Moreno & 20 & M & 61.0 & 1.77 & 194.0 & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n:::\n\n::: {#exr-preprocesamiento-3}\nEl fichero [`notas-curso2.csv`](datos/curso.csv) contiene información de las notas de los alumnos de un curso.\n\na.  Crear un data frame con los datos de los alumnos del curso a partir del fichero [`notas-curso2.csv`](datos/notas-curso2.csv).\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=19}\n    ``` {.julia .cell-code}\n    using CSV, DataFrames\n    df = CSV.read(download(\"https://aprendeconalf.es/aprendizaje-automatico-practicas-julia/datos/notas-curso2.csv\"), DataFrame; missingstring=\"NA\")\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=20}\n    ```{=tex}\n    \\begin{tabular}{r|ccccccccc}\n    \t& sexo & turno & grupo & trabaja & notaA & notaB & notaC & notaD & notaE\\\\\n    \t\\hline\n    \t& String7 & String7 & String1 & String1 & Float64 & Float64? & Float64? & Float64? & Float64?\\\\\n    \t\\hline\n    \t1 & Mujer & Tarde & C & N & 5.2 & 6.3 & 3.4 & 2.3 & 2.0 \\\\\n    \t2 & Hombre & Mañana & A & N & 5.7 & 5.7 & 4.2 & 3.5 & 2.7 \\\\\n    \t3 & Hombre & Mañana & B & N & 8.3 & 8.8 & 8.8 & 8.0 & 5.5 \\\\\n    \t4 & Hombre & Mañana & B & N & 6.1 & 6.8 & 4.0 & 3.5 & 2.2 \\\\\n    \t5 & Hombre & Mañana & A & N & 6.2 & 9.0 & 5.0 & 4.4 & 3.7 \\\\\n    \t6 & Hombre & Mañana & A & S & 8.6 & 8.9 & 9.5 & 8.4 & 3.9 \\\\\n    \t7 & Mujer & Mañana & A & N & 6.7 & 7.9 & 5.6 & 4.8 & 4.2 \\\\\n    \t8 & Mujer & Tarde & C & S & 4.1 & 5.2 & 1.7 & 0.3 & 1.0 \\\\\n    \t9 & Hombre & Tarde & C & N & 5.0 & 5.0 & 3.3 & 2.7 & 6.0 \\\\\n    \t10 & Hombre & Tarde & C & N & 5.3 & 6.3 & 4.8 & 3.6 & 2.3 \\\\\n    \t11 & Mujer & Mañana & A & N & 7.8 & \\emph{missing} & 6.5 & 6.7 & 2.8 \\\\\n    \t12 & Hombre & Mañana & A & N & 6.5 & 8.0 & 5.0 & 3.2 & 3.3 \\\\\n    \t13 & Hombre & Mañana & B & N & 6.6 & 7.6 & 5.3 & 4.0 & 1.0 \\\\\n    \t14 & Hombre & Mañana & B & N & 6.2 & 6.7 & 5.3 & 4.7 & 4.7 \\\\\n    \t15 & Hombre & Mañana & B & N & 5.2 & 4.1 & 5.8 & 5.0 & 1.9 \\\\\n    \t16 & Hombre & Mañana & B & S & 8.7 & \\emph{missing} & 7.6 & 6.3 & 9.3 \\\\\n    \t17 & Mujer & Mañana & B & N & 6.7 & 6.3 & 6.8 & 5.3 & 2.8 \\\\\n    \t18 & Mujer & Tarde & C & N & 3.1 & 4.8 & 2.7 & 1.8 & 1.0 \\\\\n    \t19 & Hombre & Mañana & B & N & 7.1 & 10.0 & 5.9 & 4.9 & 2.5 \\\\\n    \t20 & Hombre & Mañana & B & S & 5.3 & 4.8 & 2.8 & 0.9 & 4.2 \\\\\n    \t21 & Hombre & Mañana & A & N & 4.4 & 6.1 & 2.9 & 1.9 & 2.4 \\\\\n    \t22 & Mujer & Tarde & C & S & 5.7 & 6.4 & 4.2 & 3.3 & 1.0 \\\\\n    \t23 & Mujer & Tarde & C & S & 4.5 & 3.9 & 3.5 & 2.6 & 2.2 \\\\\n    \t24 & Mujer & Tarde & C & N & 4.9 & 4.4 & 5.2 & 3.7 & 0.4 \\\\\n    \t25 & Hombre & Tarde & C & N & 5.1 & 4.5 & 6.4 & 5.6 & 0.5 \\\\\n    \t26 & Hombre & Mañana & B & N & 3.5 & 3.9 & 4.0 & 3.7 & 1.7 \\\\\n    \t27 & Mujer & Mañana & A & N & 7.3 & 6.8 & 6.1 & 5.4 & 1.8 \\\\\n    \t28 & Hombre & Mañana & B & N & 6.2 & 7.9 & 3.5 & 1.9 & 3.1 \\\\\n    \t29 & Mujer & Mañana & A & N & 4.3 & 7.4 & 2.9 & 1.7 & 0.2 \\\\\n    \t30 & Hombre & Mañana & B & N & 7.9 & 7.6 & 7.0 & 6.1 & 0.4 \\\\\n    \t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nb.  Obtener el número de datos perdidos en cada columna.\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=20}\n    ``` {.julia .cell-code}\n    describe(df)[:, [:variable, :nmissing]]\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=21}\n    ```{=tex}\n    \\begin{tabular}{r|cc}\n    \t& variable & nmissing\\\\\n    \t\\hline\n    \t& Symbol & Int64\\\\\n    \t\\hline\n    \t1 & sexo & 0 \\\\\n    \t2 & turno & 0 \\\\\n    \t3 & grupo & 0 \\\\\n    \t4 & trabaja & 0 \\\\\n    \t5 & notaA & 0 \\\\\n    \t6 & notaB & 5 \\\\\n    \t7 & notaC & 1 \\\\\n    \t8 & notaD & 2 \\\\\n    \t9 & notaE & 2 \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n\nc.  Recodificar la variable `grupo` en una colección de columnas binarias.\n\n    ::: {.callout-note collapse=\"true\"}\n    ## Ayuda\n\n    Utilizar la función [`onehotbatch`](https://fluxml.ai/Flux.jl/stable/reference/data/onehot/) del paquete [OneHotArrays](https://fluxml.ai/Flux.jl/) para recodificar una variable categórica en una colección de columnas binarias.\n    :::\n\n    ::: {.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell execution_count=21}\n    ``` {.julia .cell-code}\n    using OneHotArrays\n    codificacion = permutedims(onehotbatch(df.grupo, unique(df.grupo)))\n    hcat(df, DataFrame(codificacion, :auto))\n    ```\n    \n    ::: {.cell-output .cell-output-display execution_count=22}\n    ```{=tex}\n    \\begin{tabular}{r|cccccccccc}\n    \t& sexo & turno & grupo & trabaja & notaA & notaB & notaC & notaD & notaE & \\\\\n    \t\\hline\n    \t& String7 & String7 & String1 & String1 & Float64 & Float64? & Float64? & Float64? & Float64? & \\\\\n    \t\\hline\n    \t1 & Mujer & Tarde & C & N & 5.2 & 6.3 & 3.4 & 2.3 & 2.0 & $\\dots$ \\\\\n    \t2 & Hombre & Mañana & A & N & 5.7 & 5.7 & 4.2 & 3.5 & 2.7 & $\\dots$ \\\\\n    \t3 & Hombre & Mañana & B & N & 8.3 & 8.8 & 8.8 & 8.0 & 5.5 & $\\dots$ \\\\\n    \t4 & Hombre & Mañana & B & N & 6.1 & 6.8 & 4.0 & 3.5 & 2.2 & $\\dots$ \\\\\n    \t5 & Hombre & Mañana & A & N & 6.2 & 9.0 & 5.0 & 4.4 & 3.7 & $\\dots$ \\\\\n    \t6 & Hombre & Mañana & A & S & 8.6 & 8.9 & 9.5 & 8.4 & 3.9 & $\\dots$ \\\\\n    \t7 & Mujer & Mañana & A & N & 6.7 & 7.9 & 5.6 & 4.8 & 4.2 & $\\dots$ \\\\\n    \t8 & Mujer & Tarde & C & S & 4.1 & 5.2 & 1.7 & 0.3 & 1.0 & $\\dots$ \\\\\n    \t9 & Hombre & Tarde & C & N & 5.0 & 5.0 & 3.3 & 2.7 & 6.0 & $\\dots$ \\\\\n    \t10 & Hombre & Tarde & C & N & 5.3 & 6.3 & 4.8 & 3.6 & 2.3 & $\\dots$ \\\\\n    \t11 & Mujer & Mañana & A & N & 7.8 & \\emph{missing} & 6.5 & 6.7 & 2.8 & $\\dots$ \\\\\n    \t12 & Hombre & Mañana & A & N & 6.5 & 8.0 & 5.0 & 3.2 & 3.3 & $\\dots$ \\\\\n    \t13 & Hombre & Mañana & B & N & 6.6 & 7.6 & 5.3 & 4.0 & 1.0 & $\\dots$ \\\\\n    \t14 & Hombre & Mañana & B & N & 6.2 & 6.7 & 5.3 & 4.7 & 4.7 & $\\dots$ \\\\\n    \t15 & Hombre & Mañana & B & N & 5.2 & 4.1 & 5.8 & 5.0 & 1.9 & $\\dots$ \\\\\n    \t16 & Hombre & Mañana & B & S & 8.7 & \\emph{missing} & 7.6 & 6.3 & 9.3 & $\\dots$ \\\\\n    \t17 & Mujer & Mañana & B & N & 6.7 & 6.3 & 6.8 & 5.3 & 2.8 & $\\dots$ \\\\\n    \t18 & Mujer & Tarde & C & N & 3.1 & 4.8 & 2.7 & 1.8 & 1.0 & $\\dots$ \\\\\n    \t19 & Hombre & Mañana & B & N & 7.1 & 10.0 & 5.9 & 4.9 & 2.5 & $\\dots$ \\\\\n    \t20 & Hombre & Mañana & B & S & 5.3 & 4.8 & 2.8 & 0.9 & 4.2 & $\\dots$ \\\\\n    \t21 & Hombre & Mañana & A & N & 4.4 & 6.1 & 2.9 & 1.9 & 2.4 & $\\dots$ \\\\\n    \t22 & Mujer & Tarde & C & S & 5.7 & 6.4 & 4.2 & 3.3 & 1.0 & $\\dots$ \\\\\n    \t23 & Mujer & Tarde & C & S & 4.5 & 3.9 & 3.5 & 2.6 & 2.2 & $\\dots$ \\\\\n    \t24 & Mujer & Tarde & C & N & 4.9 & 4.4 & 5.2 & 3.7 & 0.4 & $\\dots$ \\\\\n    \t25 & Hombre & Tarde & C & N & 5.1 & 4.5 & 6.4 & 5.6 & 0.5 & $\\dots$ \\\\\n    \t26 & Hombre & Mañana & B & N & 3.5 & 3.9 & 4.0 & 3.7 & 1.7 & $\\dots$ \\\\\n    \t27 & Mujer & Mañana & A & N & 7.3 & 6.8 & 6.1 & 5.4 & 1.8 & $\\dots$ \\\\\n    \t28 & Hombre & Mañana & B & N & 6.2 & 7.9 & 3.5 & 1.9 & 3.1 & $\\dots$ \\\\\n    \t29 & Mujer & Mañana & A & N & 4.3 & 7.4 & 2.9 & 1.7 & 0.2 & $\\dots$ \\\\\n    \t30 & Hombre & Mañana & B & N & 7.9 & 7.6 & 7.0 & 6.1 & 0.4 & $\\dots$ \\\\\n    \t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ &  \\\\\n    \\end{tabular}\n    ```\n    :::\n    :::\n    \n    \n    :::\n:::\n\n## Ejercicios propuestos\n\n::: {#exr-preprocesaimento-5}\nEl fichero [`vinos.csv`](datos/vinos.csv) contiene información sobre las características de una muestra de vinos portugueses de la denominación \"Vinho Verde\". Las variables que contiene son:\n\n| Variable | Descripción | Tipo (unidades) |\n|--------------------|------------------------------------|-----------------|\n| tipo | Tipo de vino | Categórica (blanco, tinto) |\n| meses.barrica | Mesesde envejecimiento en barrica | Numérica(meses) |\n| acided.fija | Cantidadde ácidotartárico | Numérica(g/dm3) |\n| acided.volatil | Cantidad de ácido acético | Numérica(g/dm3) |\n| acido.citrico | Cantidad de ácidocítrico | Numérica(g/dm3) |\n| azucar.residual | Cantidad de azúcarremanente después de la fermentación | Numérica(g/dm3) |\n| cloruro.sodico | Cantidad de clorurosódico | Numérica(g/dm3) |\n| dioxido.azufre.libre | Cantidad de dióxido de azufreen formalibre | Numérica(mg/dm3) |\n| dioxido.azufre.total | Cantidadde dióxido de azufretotal en forma libre o ligada | Numérica(mg/dm3) |\n| densidad | Densidad | Numérica(g/cm3) |\n| ph | pH | Numérica(0-14) |\n| sulfatos | Cantidadde sulfato de potasio | Numérica(g/dm3) |\n| alcohol | Porcentajede contenidode alcohol | Numérica(0-100) |\n| calidad | Calificación otorgada porun panel de expertos | Numérica(0-10) |\n\na.  Crear un data frame con los datos de los vinos a partir del fichero [`vinos.csv`](datos/vinos.csv).\n\nb.  Obtener el número de valores perdidos en cada columna.\n\nc.  Imputar los valores perdidos del alcohol con la media de los valores no perdidos para cada tipo de vino.\n\nd.  Crear la variable categórica `Envejecimiento` recodificando la variable `meses.barrica` en las siguientes categorías.\n\n    | Rango en meses | Categoría    |\n    |:---------------|:-------------|\n    | Menos de 3     | Joven        |\n    | Entre 3 y 12   | Crianza      |\n    | Entre 12 y 18  | Reserva      |\n    | Más de 18      | Gran reserva |\n\ne.  Crear la variable categórica `Dulzor` recodificando la variable `azucar.residual` en las siguientes categorías.\n\n    | Rango azúcar            | Categoría |\n    |:------------------------|:----------|\n    | Menos de 4              | Seco      |\n    | Más de 4 y menos de 12  | Semiseco  |\n    | Más de 12 y menos de 45 | Semidulce |\n    | Más de 45               | Dulce     |\n\nf.  Filtrar el conjunto de datos para quedarse con los vinos Reserva o Gran Reserva con una calidad superior a 7 y ordenar el data frame por calidad de forma descendente.\n\ng.  ¿Cuántos vinos blancos con un contenido en alcohol superior al 12% y una calidad superior a 8 hay en el conjunto de datos?\n\nh.  ¿Cuáles son los 10 mejores vinos tintos crianza secos?\n:::\n\n",
    "supporting": [
      "02-preprocesamiento_files/figure-pdf"
    ],
    "filters": []
  }
}