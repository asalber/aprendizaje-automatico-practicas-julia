[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pácticas de Aprendizaje Automático con Julia",
    "section": "",
    "text": "Prefacio\n¡Bienvenido a Prácticas de Aprendizaje Automático con Julia!\nEste libro presenta una recopilación de prácticas de Aprendizaje Automático (Machine Learning) con el lenguaje de programación Julia.\nNo es un libro para aprender a programar con Julia, ya que solo enseña el uso del lenguaje y de algunos de sus paquetes para implementar los algoritmos más comunes de Aprendizaje Automático. Para quienes estén interesados en aprender a programar en este Julia, os recomiendo leer este manual de Julia.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "index.html#licencia",
    "href": "index.html#licencia",
    "title": "Pácticas de Aprendizaje Automático con Julia",
    "section": "Licencia",
    "text": "Licencia\nEsta obra está bajo una licencia Reconocimiento – No comercial – Compartir bajo la misma licencia 3.0 España de Creative Commons. Para ver una copia de esta licencia, visite https://creativecommons.org/licenses/by-nc-sa/3.0/es/.\nCon esta licencia eres libre de:\n\nCopiar, distribuir y mostrar este trabajo.\nRealizar modificaciones de este trabajo.\n\nBajo las siguientes condiciones:\n\nReconocimiento. Debe reconocer los créditos de la obra de la manera especificada por el autor o el licenciador (pero no de una manera que sugiera que tiene su apoyo o apoyan el uso que hace de su obra).\nNo comercial. No puede utilizar esta obra para fines comerciales.\nCompartir bajo la misma licencia. Si altera o transforma esta obra, o genera una obra derivada, sólo puede distribuir la obra generada bajo una licencia idéntica a ésta.\n\nAl reutilizar o distribuir la obra, tiene que dejar bien claro los términos de la licencia de esta obra.\nEstas condiciones pueden no aplicarse si se obtiene el permiso del titular de los derechos de autor.\nNada en esta licencia menoscaba o restringe los derechos morales del autor.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "01-introduccion.html",
    "href": "01-introduccion.html",
    "title": "1  Introducción",
    "section": "",
    "text": "1.1 El REPL de Julia\nLa gran potencia de cálculo alcanzada por los ordenadores en las últimas décadas ha convertido a los mismos en poderosas herramientas al servicio de todas aquellas disciplinas que, como las matemáticas, requieren cálculos largos y complejos.\nJulia es un lenguaje de programación especialmente orientado al cálculo numérico y el análisis de datos. Julia permite además realizar cálculos simbólicos y dispone de una gran biblioteca de paquetes con aplicaciones en muy diversas áreas de las Matemáticas como Cálculo, Álgebra, Geometría, Matemática Discreta o Estadística.\nLa ventaja de Julia frente a otros programas habituales de cálculo como Mathematica, MATLAB o Sage radica en su potencia de cálculo y su velocidad (equiparable al lenguaje C), lo que lo hace ideal para manejar grandes volúmenes de datos o realizar tareas que requieran largos y complejos cálculos. Además, es software libre por lo que resulta ideal para introducirlo en el aula como soporte computacional para los modelos matemáticos sin coste alguno.\nEn el siguiente enlace se explica el procedimiento de instalación de Julia.\nExisten también varios entornos de desarrollo online que permiten ejecutar código en Julia sin necesidad de instalarlo en nuestro ordenador, como por ejemplo Replit, Cocalc o Codeanywhere.\nEl objetivo de esta práctica es introducir al alumno en la utilización de este lenguaje, enseñándole a realizar las operaciones básicas más habituales en Cálculo.\nPara arrancar el REPL^(REPL es el acrónimo de Read, Evaluate, Print and Loop, que describe el funcionamiento del compilador de Julia) de julia basta con abrir una terminal y teclear julia.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#el-repl-de-julia",
    "href": "01-introduccion.html#el-repl-de-julia",
    "title": "1  Introducción",
    "section": "",
    "text": "prompt&gt; julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.7.3 (2022-05-06)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia&gt;",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#el-gestor-de-paquetes-de-julia",
    "href": "01-introduccion.html#el-gestor-de-paquetes-de-julia",
    "title": "1  Introducción",
    "section": "1.2 El gestor de paquetes de Julia",
    "text": "1.2 El gestor de paquetes de Julia\nJulia viene con varios paquetes básicos preinstalados, como por ejemplo el paquete LinearAlgebra que define funciones básicas del Álgebra Lineal, pero en estas prácticas utilizaremos otros muchos paquetes que añaden más funcionalidades que no vienen instalados por defecto y tendremos que instalarlos aparte. Julia tiene un potente gestor de paquetes que facilita la búsqueda, instalación, actualización y eliminación de paquetes.\nPor defecto el gestor de paquetes utiliza el repositorio de paquetes oficial pero se pueden instalar paquetes de otros repositorios.\nPara entrar en el modo de gestión de paquetes hay que teclear ]. Esto produce un cambio en el prompt del REPL de Julia.\nLos comandos más habituales son:\n\nadd p: Instala el paquete p en el entorno activo de Julia.\nupdate: Actualiza los paquetes del entorno activo de Julia.\nstatus: Muestra los paquetes instalados y sus versiones en el entorno activo de Julia.\nremove p: Elimina el paquete p del entorno activo de Julia.\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\nPara instalar el paquete SymPy para cálculo simbólico basta con teclear add Sympy.\n(@v1.7) pkg&gt; add SymPy\n    Updating registry at `~/.julia/registries/General.toml`\n   Resolving package versions...\n    Updating `~/.julia/environments/v1.7/Project.toml`\n  [24249f21] + SymPy v1.1.6\n    Updating `~/.julia/environments/v1.7/Manifest.toml`\n  [3709ef60] + CommonEq v0.2.0\n  [38540f10] + CommonSolve v0.2.1\n  [438e738f] + PyCall v1.93.1\n  [24249f21] + SymPy v1.1.6",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#operadores-aritméticos.",
    "href": "01-introduccion.html#operadores-aritméticos.",
    "title": "1  Introducción",
    "section": "1.3 Operadores aritméticos.",
    "text": "1.3 Operadores aritméticos.\nEl uso más simple de Julia es la realización de operaciones aritméticas como en una calculadora. En Julia se utilizan los siguientes operadores.\n\n\n\nOperador\nDescripción\n\n\n\n\nx + y\nSuma\n\n\nx - y\nResta\n\n\nx * y\nProducto\n\n\nx / y\nDivisión\n\n\nx ÷ y\nCociente división entera\n\n\nx % y\nResto división entera\n\n\nx ^ y\nPotencia",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#operadores-de-comparación",
    "href": "01-introduccion.html#operadores-de-comparación",
    "title": "1  Introducción",
    "section": "1.4 Operadores de comparación",
    "text": "1.4 Operadores de comparación\n\n\n\nOperador\nDescripción\n\n\n\n\n==\nIgualdad\n\n\n!=, ≠\nDesigualdad\n\n\n&lt;\nMenor que\n\n\n&lt;=, ≤\nMenor o igual que\n\n\n&gt;\nMayor que\n\n\n&gt;=, ≥\nMayor o igual que",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#operadores-booleanos",
    "href": "01-introduccion.html#operadores-booleanos",
    "title": "1  Introducción",
    "section": "1.5 Operadores booleanos",
    "text": "1.5 Operadores booleanos\n\n\n\nOperador\nDescripción\n\n\n\n\n!x\nNegación\n\n\nx && y\nConjunción (y)\n\n\nx || y\nDisyunción (o)\n\n\n\nExisten también un montón de funciones predefinidas habituales en Cálculo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#funciones-de-redondeo",
    "href": "01-introduccion.html#funciones-de-redondeo",
    "title": "1  Introducción",
    "section": "1.6 Funciones de redondeo",
    "text": "1.6 Funciones de redondeo\n\n\n\n\n\n\n\nFunción\nDescripción\n\n\n\n\nround(x)\nDevuelve el entero más próximo a x\n\n\nround(x, digits = n)\nDevuelve al valor más próximo a x con n decimales\n\n\nfloor(x)\nRedondea x al próximo entero menor\n\n\nceil(x)\nRedondea x al próximo entero mayor\n\n\ntrunc(x)\nDevuelve la parte entera de x\n\n\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; round(2.7)\n3.0\n\njulia&gt; floor(2.7)\n2.0\n\njulia&gt; floor(-2.7)\n-3.0\n\njulia&gt; ceil(2.7)\n3.0\n\njulia&gt; ceil(-2.7)\n-2.0\n\njulia&gt; trunc(2.7)\n2.0\n\njulia&gt; trunc(-2.7)\n-2.0\n\njulia&gt; round(2.5)\n2.0\n\njulia&gt; round(2.786, digits = 2)\n2.79",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#funciones-de-división",
    "href": "01-introduccion.html#funciones-de-división",
    "title": "1  Introducción",
    "section": "1.7 Funciones de división",
    "text": "1.7 Funciones de división\n\n\n\n\n\n\n\nFunción\nDescripción\n\n\n\n\ndiv(x,y), x÷y\nCociente de la división entera\n\n\nfld(x,y)\nCociente de la división entera redondeado hacia abajo\n\n\ncld(x,y)\nCociente de la división entera redondeado hacia arriba\n\n\nrem(x,y), x%y\nResto de la división entera. Se cumple x == div(x,y)*y + rem(x,y)\n\n\nmod(x,y)\nMódulo con respecto a y. Se cumple x == fld(x,y)*y + mod(x,y)\n\n\ngcd(x,y...)\nMáximo común divisor positivo de x, y,…\n\n\nlcm(x,y...)\nMínimo común múltiplo positivo de x, y,…\n\n\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; div(5,3)\n1\n\njulia&gt; cld(5,3)\n2\n\njulia&gt; 5%3\n2\n\njulia&gt; -5%3\n-2\n\njulia&gt; mod(5,3)\n2\n\njulia&gt; mod(-5,3)\n1\n\njulia&gt; gcd(12,18)\n6\n\njulia&gt; lcm(12,18)\n36",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#funciones-para-el-signo-y-el-valor-absoluto",
    "href": "01-introduccion.html#funciones-para-el-signo-y-el-valor-absoluto",
    "title": "1  Introducción",
    "section": "1.8 Funciones para el signo y el valor absoluto",
    "text": "1.8 Funciones para el signo y el valor absoluto\n\n\n\n\n\n\n\nFunción\nDescripción\n\n\n\n\nabs(x)\nValor absoluto de x\n\n\nsign(x)\nDevuelve -1 si x es positivo, -1 si es negativo y 0 si es 0.\n\n\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; abs(2.5)\n2.5\n\njulia&gt; abs(-2.5)\n2.5\n\njulia&gt; sign(-2.5)\n-1.0\n\njulia&gt; sign(0)\n0\n\njulia&gt; sign(2.5)\n1.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#raíces-exponenciales-y-logaritmos",
    "href": "01-introduccion.html#raíces-exponenciales-y-logaritmos",
    "title": "1  Introducción",
    "section": "1.9 Raíces, exponenciales y logaritmos",
    "text": "1.9 Raíces, exponenciales y logaritmos\n\n\n\n\n\n\n\nFunción\nDescripción\n\n\n\n\nsqrt(x), √x\nRaíz cuadrada de x\n\n\ncbrt(x), ∛x\nRaíz cúbica de x\n\n\nexp(x)\nExponencial de x\n\n\nlog(x)\nLogaritmo neperiano de x\n\n\nlog(b,x)\nLogaritmo en base b de x\n\n\nlog2(x)\nLogaritmo en base 2 de x\n\n\nlog10(x)\nLogaritmo en base 10 de x\n\n\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; sqrt(4)\n2.0\n\njulia&gt; cbrt(27)\n3.0\n\njulia&gt; exp(1)\n2.718281828459045\n\njulia&gt; exp(-Inf)\n0.0\n\njulia&gt; log(1)\n0.0\n\njulia&gt; log(0)\n-Inf\n\njulia&gt; log(-1)\nERROR: DomainError with -1.0:\nlog will only return a complex result if called with a complex argument.\n...\n\njulia&gt; log(-1+0im)\n0.0 + 3.141592653589793im\n\njulia&gt; log2(2^3)\n3.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#funciones-trigonométricas",
    "href": "01-introduccion.html#funciones-trigonométricas",
    "title": "1  Introducción",
    "section": "1.10 Funciones trigonométricas",
    "text": "1.10 Funciones trigonométricas\n\n\n\n\n\n\n\nFunción\nDescripción\n\n\n\n\nhypot(x,y)\nHipotenusa del triángulo rectángulo con catetos x e y\n\n\nsin(x)\nSeno del ángulo x en radianes\n\n\nsind(x)\nSeno del ángulo x en grados\n\n\ncos(x)\nCoseno del ángulo x en radianes\n\n\ncosd(x)\nCoseno del ángulo x en grados\n\n\ntan(x)\nTangente del ángulo x en radianes\n\n\ntand(x)\nTangente del ángulo x en grados\n\n\nsec(x)\nSecante del ángulo x en radianes\n\n\ncsc(x)\nCosecante del ángulo x en radianes\n\n\ncot(x)\nCotangente del ángulo x en radianes\n\n\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; sin(π/2)\n1.0\n\njulia&gt; cos(π/2)\n6.123233995736766e-17\n\njulia&gt; cosd(90)\n0.0\n\njulia&gt; tan(π/4)\n0.9999999999999999\n\njulia&gt; tand(45)\n1.0\n\njulia&gt; tan(π/2)\n1.633123935319537e16\n\njulia&gt; tand(90)\nInf\n\njulia&gt; sin(π/4)^2 + cos(π/4)^2\n1.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#funciones-trigonométricas-inversas",
    "href": "01-introduccion.html#funciones-trigonométricas-inversas",
    "title": "1  Introducción",
    "section": "1.11 Funciones trigonométricas inversas",
    "text": "1.11 Funciones trigonométricas inversas\n\n\n\n\n\n\n\nFunción\nDescripción\n\n\n\n\nasin(x)\nArcoseno (inversa del seno) de x en radianes\n\n\nasind(x)\nArcoseno (inversa del seno) de x en grados\n\n\nacos(x)\nArcocoseno (inversa del coseno) de x en radianes\n\n\nacosd(x)\nArcocoseno (inversa del coseno) de x en grados\n\n\natan(x)\nArcotangente (inversa de la tangente) de x en radianes\n\n\natand(x)\nArcotangente (inversa de la tangente) de x en grados\n\n\nasec(x)\nArcosecante (inversa de la secante) de x en radianes\n\n\nacsc(x)\nArcocosecante (inversa de la cosecante) de x en radianes\n\n\nacot(x)\nArcocotangente (inversa de la cotangente) de x en radianes\n\n\n\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; asin(1)\n1.5707963267948966\n\njulia&gt; asind(1)\n90.0\n\njulia&gt; acos(-1)\n3.141592653589793\n\njulia&gt; atan(1)\n0.7853981633974483\n\njulia&gt; atand(tan(π/4))\n45.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#precedencia-de-operadores",
    "href": "01-introduccion.html#precedencia-de-operadores",
    "title": "1  Introducción",
    "section": "1.12 Precedencia de operadores",
    "text": "1.12 Precedencia de operadores\nA la hora de evaluar una expresión aritmética, Julia evalúa los operadores según el siguiente orden de prioridad (de mayor a menor prioridad).\n\n\n\n\n\n\n\n\nCategoría\nOperadores\nAsociatividad\n\n\n\n\nFunciones\nexp, log, sin, etc.\n\n\n\nExponenciación\n^\nDerecha\n\n\nUnarios\n+ - √\nDerecha\n\n\nFracciones\n//\nIzquierda\n\n\nMultiplicación\n* / % & \\ ÷\nIzquierda\n\n\nAdición\n+ - |\nIzquierda\n\n\nComparaciones\n&gt; &lt; &gt;= &lt;= == != !==\n\n\n\nAsignaciones\n= += -= *= /= //= ^= ÷= %= |= &=\nDerecha\n\n\n\nCuando se quiera evaluar un operador con menor prioridad antes que otro con mayor prioridad, hay que utilizar paréntesis.\n\n\n\n\n\n\nEjemplo\n\n\n\n\n\njulia&gt; 1 + 4 ^ 2 / 2 - 3\n6.0\n\njulia&gt; (1 + 4 ^ 2) / 2 - 3\n5.5\n\njulia&gt; (1 + 4) ^ 2 / 2 - 3\n9.5\n\njulia&gt; 1 + 4 ^ 2 / (2 - 3)\n-15.0\n\njulia&gt; (1 + 4 ^ 2) / (2 - 3)\n-17.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "01-introduccion.html#definición-de-variables",
    "href": "01-introduccion.html#definición-de-variables",
    "title": "1  Introducción",
    "section": "1.13 Definición de variables",
    "text": "1.13 Definición de variables\nPara definir variables se pueden utilizar cualquier carácter Unicode. Los nombres de las variables pueden contener más de una letra y, en tal caso, pueden usarse también números, pero siempre debe comenzar por una letra. Así, para Julia, la expresión xy, no se interpreta como el producto de la variable \\(x\\) por la variable \\(y\\), sino como la variable \\(xy\\). Además, se distingue entre mayúsculas y minúsculas, así que no es lo mismo \\(xy\\) que \\(xY\\).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "02-preprocesamiento.html",
    "href": "02-preprocesamiento.html",
    "title": "2  Preprocesamiento de datos",
    "section": "",
    "text": "2.1 Ejercicios Resueltos\nEsta práctica contiene ejercicios que muestran como preprocesar un conjunto de datos con Julia. El preprocesamiento de datos es una tarea fundamental en la construcción de modelos de aprendizaje automático que consiste en la limpieza, transformación y preparación de los datos para que puedan alimentar el proceso de entrenamiento de los modelos, así como para la evaluación de su rendimiento. El preprocesamiento de datos incluye tareas como\nPara la realización de esta práctica se requieren los siguientes paquetes:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preprocesamiento de datos</span>"
    ]
  },
  {
    "objectID": "02-preprocesamiento.html#ejercicios-resueltos",
    "href": "02-preprocesamiento.html#ejercicios-resueltos",
    "title": "2  Preprocesamiento de datos",
    "section": "",
    "text": "using CSV  # Para la lectura de archivos CSV.\nusing DataFrames  # Para el manejo de datos tabulares.\nusing PrettyTables  # Para mostrar tablas formateadas.\nusing Plots  # Para el dibujo de gráficas.\nusing Makie  # Para obtener gráficos interactivos.\n\nEjercicio 2.1 La siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\nCrear un data frame con los datos de la tabla.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función DataFrame del paquete DataFrames para partir el rango de valores en intervalos y asociar a cada intervalo una categoría.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing DataFrames\ndf = DataFrame(\n    Mes = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\"],\n    Ingresos = [45000, 41500, 51200, 49700],\n    Gastos = [33400, 35400, 35600, 36300],\n    Impuestos = [6450, 6300, 7100, 6850]\n    )\n\n4×4 DataFrame\n\n\n\nRow\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nString\nInt64\nInt64\nInt64\n\n\n\n\n1\nEnero\n45000\n33400\n6450\n\n\n2\nFebrero\n41500\n35400\n6300\n\n\n3\nMarzo\n51200\n35600\n7100\n\n\n4\nAbril\n49700\n36300\n6850\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con los beneficios de cada mes (ingresos - gastos - impuestos).\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf.Beneficios = df.Ingresos - df.Gastos - df.Impuestos\ndf\n\n4×5 DataFrame\n\n\n\nRow\nMes\nIngresos\nGastos\nImpuestos\nBeneficios\n\n\n\nString\nInt64\nInt64\nInt64\nInt64\n\n\n\n\n1\nEnero\n45000\n33400\n6450\n5150\n\n\n2\nFebrero\n41500\n35400\n6300\n-200\n\n\n3\nMarzo\n51200\n35600\n7100\n8500\n\n\n4\nAbril\n49700\n36300\n6850\n6550\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con el factor Balance con dos posibles categorías: positivo si ha habido beneficios y negativo si ha habido pérdidas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf.Balance = ifelse.(df.Beneficios .&gt; 0, \"positivo\", \"negativo\")\ndf\n\n4×6 DataFrame\n\n\n\nRow\nMes\nIngresos\nGastos\nImpuestos\nBeneficios\nBalance\n\n\n\nString\nInt64\nInt64\nInt64\nInt64\nString\n\n\n\n\n1\nEnero\n45000\n33400\n6450\n5150\npositivo\n\n\n2\nFebrero\n41500\n35400\n6300\n-200\nnegativo\n\n\n3\nMarzo\n51200\n35600\n7100\n8500\npositivo\n\n\n4\nAbril\n49700\n36300\n6850\n6550\npositivo\n\n\n\n\n\n\n\n\n\nFiltrar el conjunto de datos para quedarse con los nombres de los meses y los beneficios de los meses con balance positivo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[df.Balance .== \"positivo\", [:Mes, :Beneficios]]\n\n3×2 DataFrame\n\n\n\nRow\nMes\nBeneficios\n\n\n\nString\nInt64\n\n\n\n\n1\nEnero\n5150\n\n\n2\nMarzo\n8500\n\n\n3\nAbril\n6550\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 2.2 El fichero colesterol.csv contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\nCrear un data frame con los datos de todos los pacientes del estudio a partir del fichero colesterol.csv.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función CSV.read del paquete CSV para partir el rango de valores en intervalos y asociar a cada intervalo una categoría.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing CSV\ndf = CSV.read(\"datos/colesterol.csv\", DataFrame)\n\n14×6 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n\n\n2\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n3\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\n\n\n4\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n\n\n5\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n\n\n6\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n\n\n7\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n\n\n8\nPilar Martín González\n22\nM\n60.0\n1.66\nmissing\n\n\n9\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n\n\n10\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n\n\n11\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n\n\n12\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n\n\n13\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n\n\n14\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con el índice de masa corporal, usando la siguiente fórmula\n\\[\n\\mbox{IMC} = \\frac{\\mbox{Peso (kg)}}{\\mbox{Altura (cm)}^2}\n\\]\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf.imc = df.peso ./ (df.altura .^ 2)\ndf\n\n14×7 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\nFloat64?\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\n\n\n2\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\n\n\n3\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\nmissing\n\n\n4\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\n\n\n5\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\n\n\n6\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\n\n\n7\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\n\n\n8\nPilar Martín González\n22\nM\n60.0\n1.66\nmissing\n21.7738\n\n\n9\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\n\n\n10\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\n\n\n11\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\n\n\n12\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\n\n\n13\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\n\n\n14\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con la variable obesidad recodificando la columna imc en las siguientes categorías.\n\n\n\nRango IMC\nCategoría\n\n\n\n\nMenor de 18.5\nBajo peso\n\n\nDe 18.5 a 24.5\nSaludable\n\n\nDe 24.5 a 30\nSobrepeso\n\n\nMayor de 30\nObeso\n\n\n\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función cut del paquete CategoricalArrays para partir el rango de valores en intervalos y asociar a cada intervalo una categoría.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing CategoricalArrays\ndf.obesidad = cut(df.imc, [0, 18.5, 24.5, 30, Inf],\n                labels=[\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\"],\n                extend=true)\ndf\n\n14×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\nFloat64?\nCat…?\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n2\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n3\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n4\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n5\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n6\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n7\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n8\nPilar Martín González\n22\nM\n60.0\n1.66\nmissing\n21.7738\nSaludable\n\n\n9\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n10\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n11\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n12\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n13\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n14\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nSeleccionar las columnas nombre, sexo y edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[:, [:nombre, :sexo, :edad]]\n\n14×3 DataFrame\n\n\n\nRow\nnombre\nsexo\nedad\n\n\n\nString\nString1\nInt64\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\nH\n18\n\n\n2\nRosa Díaz Díaz\nM\n32\n\n\n3\nJavier García Sánchez\nH\n24\n\n\n4\nCarmen López Pinzón\nM\n35\n\n\n5\nMarisa López Collado\nM\n46\n\n\n6\nAntonio Ruiz Cruz\nH\n68\n\n\n7\nAntonio Fernández Ocaña\nH\n51\n\n\n8\nPilar Martín González\nM\n22\n\n\n9\nPedro Gálvez Tenorio\nH\n35\n\n\n10\nSantiago Reillo Manzano\nH\n46\n\n\n11\nMacarena Álvarez Luna\nM\n53\n\n\n12\nJosé María de la Guía Sanz\nH\n58\n\n\n13\nMiguel Angel Cuadrado Gutiérrez\nH\n27\n\n\n14\nCarolina Rubio Moreno\nM\n20\n\n\n\n\n\n\n\n\n\nAnonimizar los datos eliminando la columna nombre.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función select del paquete DataFrames para seleccionar las columnas deseadas y eliminar las columnas no deseadas. Existe también la función select! que modifica el data frame original eliminando las columnas no seleccionadas.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nselect(df, Not(:nombre))\n\n14×7 DataFrame\n\n\n\nRow\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\nFloat64?\nCat…?\n\n\n\n\n1\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n2\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n3\n24\nH\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n4\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n5\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n6\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n7\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n8\n22\nM\n60.0\n1.66\nmissing\n21.7738\nSaludable\n\n\n9\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n10\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n11\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n12\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n13\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n14\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nReordenar las columnas poniendo la columna sexo antes que la columna edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nselect(df, Cols(:sexo, :edad, Not(:sexo, :edad)))\n\n14×8 DataFrame\n\n\n\nRow\nsexo\nedad\nnombre\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString1\nInt64\nString\nFloat64?\nFloat64\nFloat64?\nFloat64?\nCat…?\n\n\n\n\n1\nH\n18\nJosé Luis Martínez Izquierdo\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n2\nM\n32\nRosa Díaz Díaz\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n3\nH\n24\nJavier García Sánchez\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n4\nM\n35\nCarmen López Pinzón\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n5\nM\n46\nMarisa López Collado\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n6\nH\n68\nAntonio Ruiz Cruz\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n7\nH\n51\nAntonio Fernández Ocaña\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n8\nM\n22\nPilar Martín González\n60.0\n1.66\nmissing\n21.7738\nSaludable\n\n\n9\nH\n35\nPedro Gálvez Tenorio\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n10\nH\n46\nSantiago Reillo Manzano\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n11\nM\n53\nMacarena Álvarez Luna\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n12\nH\n58\nJosé María de la Guía Sanz\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n13\nH\n27\nMiguel Angel Cuadrado Gutiérrez\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n14\nM\n20\nCarolina Rubio Moreno\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para quedarse con las mujeres.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[df.sexo .== \"M\", :]\n\n6×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\nFloat64?\nCat…?\n\n\n\n\n1\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n2\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n3\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n4\nPilar Martín González\n22\nM\n60.0\n1.66\nmissing\n21.7738\nSaludable\n\n\n5\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n6\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para quedarse con los hombres mayores de 30 años.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[(df.sexo .== \"H\") .& (df.edad .&gt; 30), :]\n\n5×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\nFloat64?\nCat…?\n\n\n\n\n1\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n2\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n3\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n4\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n5\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para quedarse con las filas sin valores perdidos.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función dropmissing del paquete DataFrames para eliminar las filas con valores perdidos.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndropmissing(df)\n\n12×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64\nFloat64\nFloat64\nFloat64\nCat…\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n2\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n3\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n4\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n5\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n6\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n7\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n8\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n9\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n10\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n11\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n12\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para eliminar las filas con datos perdidos en la columna colesterol.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función ismissing en la condición del filtro.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[.!ismissing.(df.colesterol), :]\n\n13×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64?\nFloat64?\nCat…?\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n2\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n3\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n4\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n5\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n6\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n7\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n8\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n9\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n10\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n11\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n12\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n13\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nImputar los valores perdidos en la columna colesterol con la media de los valores no perdidos.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función coalesce para reemplazar los valores perdidos por otros valores.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing Statistics\nmedia_colesterol = mean(skipmissing(df.colesterol))\ndf.colesterol = coalesce.(df.colesterol, media_colesterol)\ndf\n\n14×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64\nFloat64?\nCat…?\n\n\n\n\n1\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n2\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n3\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n4\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n5\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n6\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n7\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n8\nPilar Martín González\n22\nM\n60.0\n1.66\n220.231\n21.7738\nSaludable\n\n\n9\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n10\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n11\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n12\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n13\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n14\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\nOrdenar el data frame según la columna nombre.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función sort para ordenar las filas del data frame según los valores de una o varias columnas. Utilizar el parámetro rev para especificar mediante un vector de booleanos si el orden es ascendente o descendente.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsort(df, :nombre)\n\n14×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64\nFloat64?\nCat…?\n\n\n\n\n1\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n2\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n3\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n4\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n5\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n6\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n7\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n8\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n9\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n10\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n11\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n12\nPilar Martín González\n22\nM\n60.0\n1.66\n220.231\n21.7738\nSaludable\n\n\n13\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n14\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n\n\n\n\n\n\n\nOrdenar el data frame ascendentemente por la columna sexo y descendentemente por la columna edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsort(df, [:sexo, :edad], rev=[false, true])\n\n14×8 DataFrame\n\n\n\nRow\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\nimc\nobesidad\n\n\n\nString\nInt64\nString1\nFloat64?\nFloat64\nFloat64\nFloat64?\nCat…?\n\n\n\n\n1\nAntonio Ruiz Cruz\n68\nH\n66.0\n1.74\n249.0\n21.7994\nSaludable\n\n\n2\nJosé María de la Guía Sanz\n58\nH\n78.0\n1.87\n198.0\n22.3055\nSaludable\n\n\n3\nAntonio Fernández Ocaña\n51\nH\n62.0\n1.72\n276.0\n20.9573\nSaludable\n\n\n4\nSantiago Reillo Manzano\n46\nH\n75.0\n1.85\n280.0\n21.9138\nSaludable\n\n\n5\nPedro Gálvez Tenorio\n35\nH\n90.0\n1.94\n241.0\n23.9133\nSaludable\n\n\n6\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n27.8033\nSobrepeso\n\n\n7\nJavier García Sánchez\n24\nH\nmissing\n1.81\n191.0\nmissing\nmissing\n\n\n8\nJosé Luis Martínez Izquierdo\n18\nH\n85.0\n1.79\n182.0\n26.5285\nSobrepeso\n\n\n9\nMacarena Álvarez Luna\n53\nM\n55.0\n1.62\n262.0\n20.9572\nSaludable\n\n\n10\nMarisa López Collado\n46\nM\n51.0\n1.58\n148.0\n20.4294\nSaludable\n\n\n11\nCarmen López Pinzón\n35\nM\n65.0\n1.7\n200.0\n22.4913\nSaludable\n\n\n12\nRosa Díaz Díaz\n32\nM\n65.0\n1.73\n232.0\n21.7181\nSaludable\n\n\n13\nPilar Martín González\n22\nM\n60.0\n1.66\n220.231\n21.7738\nSaludable\n\n\n14\nCarolina Rubio Moreno\n20\nM\n61.0\n1.77\n194.0\n19.4708\nSaludable\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 2.3 El fichero notas-curso2.csv contiene información de las notas de los alumnos de un curso.\n\nCrear un data frame con los datos de los alumnos del curso a partir del fichero notas-curso2.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing CSV, DataFrames\ndf = CSV.read(\"datos/notas-curso2.csv\", DataFrame; missingstring=\"NA\")\n\n120×9 DataFrame95 rows omitted\n\n\n\nRow\nsexo\nturno\ngrupo\ntrabaja\nnotaA\nnotaB\nnotaC\nnotaD\nnotaE\n\n\n\nString7\nString7\nString1\nString1\nFloat64\nFloat64?\nFloat64?\nFloat64?\nFloat64?\n\n\n\n\n1\nMujer\nTarde\nC\nN\n5.2\n6.3\n3.4\n2.3\n2.0\n\n\n2\nHombre\nMañana\nA\nN\n5.7\n5.7\n4.2\n3.5\n2.7\n\n\n3\nHombre\nMañana\nB\nN\n8.3\n8.8\n8.8\n8.0\n5.5\n\n\n4\nHombre\nMañana\nB\nN\n6.1\n6.8\n4.0\n3.5\n2.2\n\n\n5\nHombre\nMañana\nA\nN\n6.2\n9.0\n5.0\n4.4\n3.7\n\n\n6\nHombre\nMañana\nA\nS\n8.6\n8.9\n9.5\n8.4\n3.9\n\n\n7\nMujer\nMañana\nA\nN\n6.7\n7.9\n5.6\n4.8\n4.2\n\n\n8\nMujer\nTarde\nC\nS\n4.1\n5.2\n1.7\n0.3\n1.0\n\n\n9\nHombre\nTarde\nC\nN\n5.0\n5.0\n3.3\n2.7\n6.0\n\n\n10\nHombre\nTarde\nC\nN\n5.3\n6.3\n4.8\n3.6\n2.3\n\n\n11\nMujer\nMañana\nA\nN\n7.8\nmissing\n6.5\n6.7\n2.8\n\n\n12\nHombre\nMañana\nA\nN\n6.5\n8.0\n5.0\n3.2\n3.3\n\n\n13\nHombre\nMañana\nB\nN\n6.6\n7.6\n5.3\n4.0\n1.0\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n109\nMujer\nTarde\nC\nN\n5.4\n7.3\n3.5\n2.5\n4.6\n\n\n110\nHombre\nMañana\nB\nN\n7.4\n7.4\n6.2\n5.8\n1.1\n\n\n111\nMujer\nTarde\nC\nS\n5.1\n8.1\n5.2\n5.1\n4.5\n\n\n112\nHombre\nMañana\nA\nN\n6.9\n7.8\n3.9\n2.8\nmissing\n\n\n113\nHombre\nTarde\nC\nN\n3.6\n4.8\n2.1\n0.5\n5.6\n\n\n114\nHombre\nTarde\nC\nS\n5.9\n6.2\n5.0\n3.9\n1.9\n\n\n115\nHombre\nMañana\nB\nN\n6.8\n7.2\n4.9\n3.8\n2.8\n\n\n116\nHombre\nMañana\nA\nN\n6.5\n6.1\n5.8\n4.9\n1.2\n\n\n117\nMujer\nMañana\nB\nN\n6.2\n7.0\n5.6\n5.4\n1.7\n\n\n118\nMujer\nTarde\nC\nN\n5.0\n6.5\n4.0\n2.8\n3.6\n\n\n119\nHombre\nTarde\nC\nN\n4.7\n6.0\n1.3\n0.4\n2.2\n\n\n120\nHombre\nTarde\nC\nS\n4.5\n4.7\n6.0\n4.9\n1.8\n\n\n\n\n\n\n\n\n\nObtener el número de datos perdidos en cada columna.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndescribe(df)[:, [:variable, :nmissing]]\n\n9×2 DataFrame\n\n\n\nRow\nvariable\nnmissing\n\n\n\nSymbol\nInt64\n\n\n\n\n1\nsexo\n0\n\n\n2\nturno\n0\n\n\n3\ngrupo\n0\n\n\n4\ntrabaja\n0\n\n\n5\nnotaA\n0\n\n\n6\nnotaB\n5\n\n\n7\nnotaC\n1\n\n\n8\nnotaD\n2\n\n\n9\nnotaE\n2\n\n\n\n\n\n\n\n\n\nRecodificar la variable grupo en una colección de columnas binarias.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUtilizar la función onehotbatch del paquete OneHotArrays para recodificar una variable categórica en una colección de columnas binarias.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing OneHotArrays\ncodificacion = permutedims(onehotbatch(df.grupo, unique(df.grupo)))\nhcat(df, DataFrame(codificacion, :auto))\n\n120×12 DataFrame95 rows omitted\n\n\n\nRow\nsexo\nturno\ngrupo\ntrabaja\nnotaA\nnotaB\nnotaC\nnotaD\nnotaE\nx1\nx2\nx3\n\n\n\nString7\nString7\nString1\nString1\nFloat64\nFloat64?\nFloat64?\nFloat64?\nFloat64?\nBool\nBool\nBool\n\n\n\n\n1\nMujer\nTarde\nC\nN\n5.2\n6.3\n3.4\n2.3\n2.0\ntrue\nfalse\nfalse\n\n\n2\nHombre\nMañana\nA\nN\n5.7\n5.7\n4.2\n3.5\n2.7\nfalse\ntrue\nfalse\n\n\n3\nHombre\nMañana\nB\nN\n8.3\n8.8\n8.8\n8.0\n5.5\nfalse\nfalse\ntrue\n\n\n4\nHombre\nMañana\nB\nN\n6.1\n6.8\n4.0\n3.5\n2.2\nfalse\nfalse\ntrue\n\n\n5\nHombre\nMañana\nA\nN\n6.2\n9.0\n5.0\n4.4\n3.7\nfalse\ntrue\nfalse\n\n\n6\nHombre\nMañana\nA\nS\n8.6\n8.9\n9.5\n8.4\n3.9\nfalse\ntrue\nfalse\n\n\n7\nMujer\nMañana\nA\nN\n6.7\n7.9\n5.6\n4.8\n4.2\nfalse\ntrue\nfalse\n\n\n8\nMujer\nTarde\nC\nS\n4.1\n5.2\n1.7\n0.3\n1.0\ntrue\nfalse\nfalse\n\n\n9\nHombre\nTarde\nC\nN\n5.0\n5.0\n3.3\n2.7\n6.0\ntrue\nfalse\nfalse\n\n\n10\nHombre\nTarde\nC\nN\n5.3\n6.3\n4.8\n3.6\n2.3\ntrue\nfalse\nfalse\n\n\n11\nMujer\nMañana\nA\nN\n7.8\nmissing\n6.5\n6.7\n2.8\nfalse\ntrue\nfalse\n\n\n12\nHombre\nMañana\nA\nN\n6.5\n8.0\n5.0\n3.2\n3.3\nfalse\ntrue\nfalse\n\n\n13\nHombre\nMañana\nB\nN\n6.6\n7.6\n5.3\n4.0\n1.0\nfalse\nfalse\ntrue\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n109\nMujer\nTarde\nC\nN\n5.4\n7.3\n3.5\n2.5\n4.6\ntrue\nfalse\nfalse\n\n\n110\nHombre\nMañana\nB\nN\n7.4\n7.4\n6.2\n5.8\n1.1\nfalse\nfalse\ntrue\n\n\n111\nMujer\nTarde\nC\nS\n5.1\n8.1\n5.2\n5.1\n4.5\ntrue\nfalse\nfalse\n\n\n112\nHombre\nMañana\nA\nN\n6.9\n7.8\n3.9\n2.8\nmissing\nfalse\ntrue\nfalse\n\n\n113\nHombre\nTarde\nC\nN\n3.6\n4.8\n2.1\n0.5\n5.6\ntrue\nfalse\nfalse\n\n\n114\nHombre\nTarde\nC\nS\n5.9\n6.2\n5.0\n3.9\n1.9\ntrue\nfalse\nfalse\n\n\n115\nHombre\nMañana\nB\nN\n6.8\n7.2\n4.9\n3.8\n2.8\nfalse\nfalse\ntrue\n\n\n116\nHombre\nMañana\nA\nN\n6.5\n6.1\n5.8\n4.9\n1.2\nfalse\ntrue\nfalse\n\n\n117\nMujer\nMañana\nB\nN\n6.2\n7.0\n5.6\n5.4\n1.7\nfalse\nfalse\ntrue\n\n\n118\nMujer\nTarde\nC\nN\n5.0\n6.5\n4.0\n2.8\n3.6\ntrue\nfalse\nfalse\n\n\n119\nHombre\nTarde\nC\nN\n4.7\n6.0\n1.3\n0.4\n2.2\ntrue\nfalse\nfalse\n\n\n120\nHombre\nTarde\nC\nS\n4.5\n4.7\n6.0\n4.9\n1.8\ntrue\nfalse\nfalse",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preprocesamiento de datos</span>"
    ]
  },
  {
    "objectID": "02-preprocesamiento.html#ejercicios-propuestos",
    "href": "02-preprocesamiento.html#ejercicios-propuestos",
    "title": "2  Preprocesamiento de datos",
    "section": "2.2 Ejercicios propuestos",
    "text": "2.2 Ejercicios propuestos\n\nEjercicio 2.4 Calcular el décimo término de la sucesión \\(\\left(\\frac{3n^2+n}{6n^2-1}\\right)_{n=1}^\\infty\\).\n\n\n\n\n  \n    \n      \n\n    \n    \n\n    \n     🎁\n\n\n         \n    \n    \n    \n\n\n\n\n\n\n\n\nEjercicio 2.5 Los ficheros vinos-blancos.xls y vinos-tintos.csv contienen información sobre las características de vinos blancos y tintos portugueses de la denominación “Vinho Verde”. Las variables almacenadas en estos archivos son las siguientes:\n\n\n\n\n\n\n\n\nVariable\nDescripción\nTipo (unidades)\n\n\n\n\ntipo\nTipo de vino\nFactor (blanco, tinto)\n\n\nmeses.barrica\nMesesde envejecimiento en barrica\nNumérica(meses)\n\n\nacided.fija\nCantidadde ácidotartárico\nNumérica(g/dm3)\n\n\nacided.volatil\nCantidad de ácido acético\nNumérica(g/dm3)\n\n\nacido.citrico\nCantidad de ácidocítrico\nNumérica(g/dm3)\n\n\nazucar.residual\nCantidad de azúcarremanente después de la fermentación\nNumérica(g/dm3)\n\n\ncloruro.sodico\nCantidad de clorurosódico\nNumérica(g/dm3)\n\n\ndioxido.azufre.libre\nCantidad de dióxido de azufreen formalibre\nNumérica(mg/dm3)\n\n\ndioxido.azufre.total\nCantidadde dióxido de azufretotal en forma libre o ligada\nNumérica(mg/dm3)\n\n\ndensidad\nDensidad\nNumérica(g/cm3)\n\n\nph\npH\nNumérica(0-14)\n\n\nsulfatos\nCantidadde sulfato de potasio\nNumérica(g/dm3)\n\n\nalcohol\nPorcentajede contenidode alcohol\nNumérica(0-100)\n\n\ncalidad\nCalificación otorgada porun panel de expertos\nNumérica(0-10)\n\n\n\n\nCrear un data frame con los datos de los vinos blancos partir del fichero de Excel vinos-blancos.xlsx.\nCrear un data frame con los datos de los vinos tintos partir del fichero csv vinos-tintos.csv.\nFusionar los datos de los vinos blancos y tintos en un nuevo data frame.\nConvertir el tipo de vino en un factor.\nImputar los valores perdidos del alcohol con la media de los valores no perdidos para cada tipo de vino.\nCrear un factor Envejecimiento recodificando la variable meses.barrica en las siguientes categorías.\n\n\n\nRango en meses\nCategoría\n\n\n\n\nMenos de 3\nJoven\n\n\nEntre 3 y 12\nCrianza\n\n\nEntre 12 y 18\nReserva\n\n\nMás de 18\nGran reserva\n\n\n\nCrear un factor Dulzor recodificando la variable azucar.residual en las siguientes categorías.\n\n\n\nRango azúcar\nCategoría\n\n\n\n\nMenos de 4\nSeco\n\n\nMás de 4 y menos de 12\nSemiseco\n\n\nMás de 12 y menos de 45\nSemidulce\n\n\nMás de 45\nDulce\n\n\n\nFiltrar el conjunto de datos para quedarse con los vinos Reserva o Gran Reserva con una calidad superior a 7 y ordenar el data frame por calidad de forma descendente.\n¿Cuántos vinos blancos con un contenido en alcohol superior al 12% y una calidad superior a 8 hay en el conjunto de datos?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preprocesamiento de datos</span>"
    ]
  },
  {
    "objectID": "03-regresion.html",
    "href": "03-regresion.html",
    "title": "3  Regresión",
    "section": "",
    "text": "3.1 Ejercicios Resueltos\nLos modelos de aprendizaje basados en regresión son modelos bastante simples que pueden utilizarse para predecir variables cuantitativas (regresión lineal) o cualitativas (regresión logística). Esta práctica contiene ejercicios que muestran como construir modelos de aprendizaje de regresión lineal y regresión logística con Julia.\nPara la realización de esta práctica se requieren los siguientes paquetes:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "03-regresion.html#ejercicios-resueltos",
    "href": "03-regresion.html#ejercicios-resueltos",
    "title": "3  Regresión",
    "section": "",
    "text": "using CSV  # Para la lectura de archivos CSV.\nusing DataFrames  # Para el manejo de datos tabulares.\nusing PrettyTables  # Para mostrar tablas formateadas.\nusing Plots  # Para el dibujo de gráficas.\nusing GLMakie  # Para obtener gráficos interactivos.\n\nEjercicio 3.1 El conjunto de datos viviendas.csv contiene información sobre el precio de venta de viviendas en una ciudad.\n\nCargar los datos del archivo viviendas.csv en un data frame.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing CSV, DataFrames\ndf = CSV.read(\"datos/viviendas.csv\", DataFrame)\nfirst(df, 5)\n\n5×13 DataFrame\n\n\n\nRow\nprecio\narea\ndormitorios\nbaños\nhabitaciones\ncalleprincipal\nhuespedes\nsotano\ncalentador\nclimatizacion\ngaraje\ncentrico\namueblado\n\n\n\nInt64\nInt64\nInt64\nInt64\nInt64\nString3\nString3\nString3\nString3\nString3\nInt64\nString3\nString15\n\n\n\n\n1\n13300000\n7420\n4\n2\n3\nsi\nno\nno\nno\nsi\n2\nsi\namueblado\n\n\n2\n12250000\n8960\n4\n4\n4\nsi\nno\nno\nno\nsi\n3\nno\namueblado\n\n\n3\n12250000\n9960\n3\n2\n2\nsi\nno\nsi\nno\nno\n2\nsi\nsemi-amueblado\n\n\n4\n12215000\n7500\n4\n2\n2\nsi\nno\nsi\nno\nsi\n3\nsi\namueblado\n\n\n5\n11410000\n7420\n4\n1\n2\nsi\nsi\nsi\nno\nsi\n2\nno\namueblado\n\n\n\n\n\n\n\n\n\nDibujar un diagrama de dispersión entre el precio y el area de las viviendas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nusing Plots\nplt = scatter(df.area, df.precio, xlabel=\"Area\", ylabel=\"Precio\", title=\"Precio vs Area\", label = \"Ejemplos\", fmt=:png,)\n\n\n\n\n\n\n\nDefinir un modelo lineal que explique el precio en función del área de las viviendas.\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nUn modelo lineal tiene encuación \\(y = \\theta_1 + \\theta_2 x\\).\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nprecio(area, θ) = θ[1] .+ θ[2] * area\n\nprecio (generic function with 1 method)\n\n\nObserva que la función precio está vectorizada, lo que significa que puede recibir un vector de áreas y devolver un vector de precios.\n\n\n\nInicializar los parámetros del modelo lineal con valores nulos y dibujar el modelo sobre el diagrama de dispersión.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nθ = [0.0, 0.0]\nplot!(df.area, precio(df.area, θ), label = \"Modelo 0\")\n\n\n\n\n\n\n\nDefinir una función de costo para el modelo lineal y evaluar el coste para el modelo lineal construido con los parámetros iniciales. A la vista del coste obtenido, ¿cómo de bueno es el modelo?\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nLa función de coste para un modelo lineal es el error cuadrático medio.\n\\[ J(\\theta) = \\frac{1}{2m} \\sum_{i=1}^{m} (h_\\theta(x^{(i)}) - y^{(i)})^2 \\]\ndonde \\(h_\\theta\\) es el modelo, \\(h_\\theta(x^{(i)})\\) es la predicción del modelo para el ejemplo \\(i\\)-ésimo, \\(y^{(i)}\\) es el valor real observado para el ejemplo \\(i\\)-ésimo, y \\(m\\) es el número de ejemplos.\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nfunction coste(θ, X, Y)\n    m = length(Y)\n    return sum((precio(X, θ) .- Y).^2) / (2 * m)\nend\n\ncoste(θ, df.area, df.precio)\n\n1.3106916364659266e13\n\n\nLa función de coste nos da una medida de lo lejos que están las predicciones del modelo de los valores reales observados. En este caso, el coste es muy alto, lo que indica que el modelo no es bueno.\n\n\n\n¿En qué dirección debemos modificar los parámetros del modelo para mejorar el modelo?\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara minimizar la función de coste, debemos modificar los parámetros del modelo en la dirección opuesta al gradiente de la función de coste, ya que el gradiente de una función indica la dirección de mayor crecimiento de la función.\n\n\n\nCrear una función para modificar los pesos del modelo lineal mediante el algoritmo del gradiente descendente, y aplicarla a los parámetros actuales tomando una tasa de aprendizaje de \\(10^{-8}\\). ¿Cómo han cambiado los parámetros del modelo? Dibujar el modelo actualizado sobre el diagrama de dispersión. ¿Cómo ha cambiado el coste?\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nEl algoritmo del gradiente descendente actualiza los parámetros del modelo de acuerdo a la siguiente regla:\n\\[\n\\theta_j = \\theta_j - \\alpha \\frac{\\partial J(\\theta)}{\\partial \\theta_j}\n\\]\ndonde \\(\\alpha\\) es la tasa de aprendizaje y \\(\\frac{\\partial J(\\theta)}{\\partial \\theta_j}\\) es la derivada parcial de la función de coste con respecto al parámetro \\(\\theta_j\\).\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nfunction gradiente_descendente!(θ, X, Y, α)\n    # Calculamos el número de ejemplos\n    m = length(Y)\n    # Actualizamos el término independiente del modelo lineal.\n    θ[1] -= α * sum(precio(X, θ) - Y) / m\n    # Actualizamos la pendiente del modelo lineal.\n    θ[2] -= α * sum((precio(X, θ) - Y) .* X) / m\n    return θ\nend\n\ngradiente_descendente! (generic function with 1 method)\n\n\nAplicamos la función a los parámetros del modelo actual y mostramos los nuevos parámetros.\n\ngradiente_descendente!(θ, df.area, df.precio, 1e-8)\nθ\n\n2-element Vector{Float64}:\n   0.04766729247706422\n 267.22919804579385\n\n\nDibujamos el nuevo modelo.\n\nplot!(df.area, precio(df.area, θ), label = \"Modelo 1\")\n\n\n\n\nSe observa que ahora la recta está más cerca de la nube de puntos, por lo que el modelo ha mejorado. Calculamos el coste del nuevo modelo.\n\ncoste(θ, df.area, df.precio)\n\n7.080823787113201e12\n\n\n\n\n\nRepetir el proceso de actualización de los parámetros del modelo mediante el algoritmo del gradiente descendente durante 9 iteraciones más y dibujar los modelos actualizados.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nfor i = 2:10\n    gradiente_descendente!(θ, df.area, df.precio, 1e-8)\n    plot!(df.area, precio(df.area, θ), label = \"Modelo $i\", legend = true)\nend\nplt\n\n\n\n\nDibujar un gráfico con la evolución del coste del modelo a lo largo de las iteraciones. ¿Cómo se comporta el coste a lo largo de las iteraciones?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncostes = Float64[]\nfor i = 1:10\n    gradiente_descendente!(θ, df.area, df.precio, 1e-8)\n    push!(costes, coste(θ, df.area, df.precio))\nend\ncostes\n\n10-element Vector{Float64}:\n 4.230808760870044e12\n 2.882906194020343e12\n 2.2454213686913755e12\n 1.9439256128790886e12\n 1.8013344680594421e12\n 1.7338965877160208e12\n 1.7020021263374993e12\n 1.6869177748236997e12\n 1.6797836937723748e12\n 1.6764096595632322e12\n\n\nEl coste del modelo disminuye en cada iteración, lo que indica que el modelo está mejorando. Esto se debe a que el algoritmo del gradiente descendente modifica los parámetros del modelo en la dirección que minimiza la función de coste.\n\n\n\n¿Hasta qué iteración habrá que llegar para conseguir un reducción del coste menor de un \\(0.0001\\%\\)?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nθ = [0.0, 0.0]\ncostes = [0, coste(θ, df.area, df.precio)]\ni = 1\nwhile abs(costes[end] - costes[end-1]) / costes[end-1] &gt; 0.000001\n    i += 1\n    gradiente_descendente!(θ, df.area, df.precio, 1e-8)\n    push!(costes, coste(θ, df.area, df.precio))\nend\ni\n\n23\n\n\nEn este caso, el algoritmo del gradiente descendente converge en 1000 iteraciones.\n\n\n\n¿Qué sucede si se utiliza una tasa de aprendizaje \\(\\alpha = 0.0001\\)? ¿Cómo afecta al coste y a la convergencia del modelo?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nθ = [0.0, 0.0]\ncostes = [coste(θ, df.area, df.precio)]\nfor i = 1:10\n    gradiente_descendente!(θ, df.area, df.precio, 0.0001)\n    push!(costes, coste(θ, df.area, df.precio))\nend\ncostes\n\n11-element Vector{Float64}:\n 1.3106916364659266e13\n 1.114133369099188e20\n 1.0856750832581238e27\n 1.05794371802143e34\n 1.0309206941949286e41\n 1.004587918634273e48\n 9.789277603492545e54\n 9.539230386975057e61\n 9.29557011881276e68\n 9.058133657380397e75\n 8.826762028174244e82\n\n\nSi la tasa de aprendizaje es demasiado grande, el algoritmo del gradiente descendente puede no converger y el coste puede oscilar en lugar de disminuir. En este caso, el coste aumenta en cada iteración, lo que indica que la tasa de aprendizaje es demasiado grande.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Regresión</span>"
    ]
  }
]